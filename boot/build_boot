#! /usr/bin/env python3

import os
import shutil
import argparse

parser = argparse.ArgumentParser("build_boot", "buiding a bootloader")
parser.add_argument("-c", "--clear", action="store_true")
parser.add_argument("--makeiso", action="store_true")
parser.add_argument("--runqemu", action="store_true")
args = parser.parse_args()

TARGET_NAME = "kernel.bin"
ISO_NAME = "fooOs.iso"

ASSEMBLER = "nasm"
ASSENBLER_FLAG = ["-f", "elf64"]

if os.uname().sysname == "Darwin":
    LINKER = "x86_64-elf-ld"
elif os.uname().sysname == "Linux":
    LINKER = "ld"
else:
    assert False
LINKER_SCRIPT = "linker.ld"
LINKER_FLAGS = ["-n", "-o", TARGET_NAME, "-T", LINKER_SCRIPT]

SRCS = ["multiboot2_header.asm", "boot.asm"]

GRUB_CFG_FILECONTENT = """
menuentry "foo os" {
    multiboot2 /boot/kernel.bin
    boot
}"""

##################################################


def changeExtension(filename, new_ext):
    return filename.split(".")[0] + "." + new_ext


def execute(command, msg=None, callback=None):
    info_header = "\x1b[1m\x1b[38:5:45m[INFO]\x1b[0m: "
    if msg is not None:
        print(info_header + msg)
    else:
        print(info_header + command)
    if callback is not None:
        try:
            callback()
        except:
            pass
    else:
        os.system(command)


if args.clear:
    for src in [changeExtension(filename, "o") for filename in SRCS]:
        execute("", "remove " + src, lambda: os.remove(src))
    execute("", "remove " + TARGET_NAME, lambda: os.remove(TARGET_NAME))
    execute("", "remove isofiles folder", lambda: shutil.rmtree("./isofiles"))
    execute("", "remove " + ISO_NAME, lambda: os.remove(ISO_NAME))

elif args.makeiso:
    execute(" ".join(["mkdir", "-p", "./isofiles/boot/grub"]))
    execute(" ".join(["mv", "./" + TARGET_NAME, "./isofiles/boot/" + TARGET_NAME]))
    with open("./isofiles/boot/grub/grub.cfg", "w") as f:
        f.write(GRUB_CFG_FILECONTENT)
    execute(" ".join(["grub-mkrescue", "-o", ISO_NAME, "isofiles"]))

elif args.runqemu:
    execute(" ".join(["qemu-system-x86_64", "-cdrom", ISO_NAME]))

else:
    for src in SRCS:
        execute(" ".join([ASSEMBLER, " ".join(ASSENBLER_FLAG), src]))
    execute(
        " ".join(
            [LINKER, " ".join(LINKER_FLAGS)]
            + [changeExtension(filename, "o") for filename in SRCS],
        )
    )
